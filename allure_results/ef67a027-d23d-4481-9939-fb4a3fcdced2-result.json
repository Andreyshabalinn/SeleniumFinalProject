{"name": "test_guest_cant_see_success_message_after_adding_product_to_basket", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nselenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: x = 285 \nЧему равно log10(abs(12*sin(x)))?\nРешите задачу за 3 сек, чтобы получить скидку.\nПри успешном решении вы найдете проверочный код в консоли браузера.\nMessage: unexpected alert open: {Alert text : x = 285 \nЧему равно log10(abs(12*sin(x)))?\nРешите задачу за 3 сек, чтобы получить скидку.\nПри успешном решении вы найдете проверочный код в консоли браузера.}\n  (Session info: chrome=113.0.5672.64)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x01078893+48451]\n\t(No symbol) [0x0100B8A1]\n\t(No symbol) [0x00F15058]\n\t(No symbol) [0x00F6C90D]\n\t(No symbol) [0x00F5A0B6]\n\t(No symbol) [0x00F37E08]\n\t(No symbol) [0x00F38F2D]\n\tGetHandleVerifier [0x012D8E3A+2540266]\n\tGetHandleVerifier [0x01318959+2801161]\n\tGetHandleVerifier [0x0131295C+2776588]\n\tGetHandleVerifier [0x01102280+612144]\n\t(No symbol) [0x01014F6C]\n\t(No symbol) [0x010111D8]\n\t(No symbol) [0x010112BB]\n\t(No symbol) [0x01004857]\n\tBaseThreadInitThunk [0x76840099+25]\n\tRtlGetAppContainerNamedObjectPath [0x774E7B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x774E7B3E+238]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6461a9a90d1aadfbe01e2920c29b28ba\")>\n\n    @pytest.mark.xfail\n    def test_guest_cant_see_success_message_after_adding_product_to_basket(browser):\n        page = ProductPage(browser, \"http://selenium1py.pythonanywhere.com/catalogue/coders-at-work_207/?promo=offer0\")\n        page.open()\n        page.add_to_basket()\n>       page.should_not_be_success_message()\n\ntest_product_page.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\product_page.py:27: in should_not_be_success_message\n    assert self.is_not_element_present(\npages\\base_page.py:27: in is_not_element_present\n    WebDriverWait(self.browser, timeout).until(EC.presence_of_element_located((how, what)))\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:81: in until\n    value = method(self._driver)\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:64: in _predicate\n    return driver.find_element(*locator)\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:857: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000276AACAD1C0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"x = 285 \\\\nЧему равно log10(abs(12*sin(x)))?\\\\nРешите задачу за 3 ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774E7B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774E7B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: x = 285 \nE           Чему равно log10(abs(12*sin(x)))?\nE           Решите задачу за 3 сек, чтобы получить скидку.\nE           При успешном решении вы найдете проверочный код в консоли браузера.\nE           Message: unexpected alert open: {Alert text : x = 285 \nE           Чему равно log10(abs(12*sin(x)))?\nE           Решите задачу за 3 сек, чтобы получить скидку.\nE           При успешном решении вы найдете проверочный код в консоли браузера.}\nE             (Session info: chrome=113.0.5672.64)\nE           Stacktrace:\nE           Backtrace:\nE           \tGetHandleVerifier [0x01078893+48451]\nE           \t(No symbol) [0x0100B8A1]\nE           \t(No symbol) [0x00F15058]\nE           \t(No symbol) [0x00F6C90D]\nE           \t(No symbol) [0x00F5A0B6]\nE           \t(No symbol) [0x00F37E08]\nE           \t(No symbol) [0x00F38F2D]\nE           \tGetHandleVerifier [0x012D8E3A+2540266]\nE           \tGetHandleVerifier [0x01318959+2801161]\nE           \tGetHandleVerifier [0x0131295C+2776588]\nE           \tGetHandleVerifier [0x01102280+612144]\nE           \t(No symbol) [0x01014F6C]\nE           \t(No symbol) [0x010111D8]\nE           \t(No symbol) [0x010112BB]\nE           \t(No symbol) [0x01004857]\nE           \tBaseThreadInitThunk [0x76840099+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x774E7B6E+286]\nE           \tRtlGetAppContainerNamedObjectPath [0x774E7B3E+238]\n\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:246: UnexpectedAlertPresentException"}, "start": 1683540892207, "stop": 1683540894627, "uuid": "e91b507a-82d3-4408-ab41-3e1d8532b54c", "historyId": "a6a0d3bb6cb6bc822eaf40d4fb29666d", "testCaseId": "1c8a9198cae72a413cddcfb1096300dc", "fullName": "test_product_page#test_guest_cant_see_success_message_after_adding_product_to_basket", "labels": [{"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "suite", "value": "test_product_page"}, {"name": "host", "value": "WIN-V8TQK9SAURU"}, {"name": "thread", "value": "5472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_product_page"}]}